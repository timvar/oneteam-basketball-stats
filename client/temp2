export interface IGettingPeopleAction extends Action<"GettingPeople"> {}

export interface IGotPeopleAction extends Action<"GotPeople"> {
  people: IPerson[];
}

export interface IPostingPersonAction extends Action<"PostingPerson"> {
  type: "PostingPerson";
}

export interface IPostedPersonAction extends Action<"PostedPerson"> {
  result: IPostPersonResult;
}

export type PeopleActions =
  | IGettingPeopleAction
  | IGotPeopleAction
  | IPostingPersonAction
  | IPostedPersonAction;





export const getPeopleActionCreator: ActionCreator<ThunkAction<
  // The type of the last action to be dispatched - will always be promise<T> for async actions
  Promise<IGotPeopleAction>,
  // The type for the data within the last action
  IPerson[],
  // The type of the parameter for the nested function
  null,
  // The type of the last action to be dispatched
  IGotPeopleAction
>> = () => {
    
    const gotPeopleAction: IGotPeopleAction = {
      people,
      type: "GotPeople"
    };
    return dispatch(gotPeopleAction);
  };
};
